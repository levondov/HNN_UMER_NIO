function varargout = calcfielderr(varargin)
% CALCFIELDERR will load the field error data from the base application user
% data area and calculate the actual error to apply to THERING. This
% is then stored again in the field error data structure.
%
% CALCFIELDERR(N,DISTTYPE) where N is the number of error seeds to
% generate and DISTTYPE is the type of distribution:
%
% 'normal' -> Normally distributed
% 'equal'  -> Flat distribution +-sigma provided and cutoff not used.
% 'sho'    -> Simple harmonic oscillator distribution +-sigma (sharp edge)
%             and cutoff not used.
% 'abs'    -> No random number generated, use sigma as the field error.

global THERING

if ~exist('THERING','var')
    disp('Please load the model first');
    return
end

ferr = getappdata(0,'FielderrData');

if isempty(ferr)
    disp('No field error data found. See SETFIELDERR for more info');
    return
end

% Parse input data
n = 2;
if nargin >= n & ischar(varargin{n})
    disttype = varargin{n};
else
    disp('Default distribution: normal');
    disttype = 'normal';
end

n = n-1;
if nargin >= n & isnumeric(varargin{n})
    numseeds = varargin{n};
else
    disp('Defaulting number of seeds to 1.');
    numseeds = 1;
end
ferr.numseeds = numseeds;
% Current seed being used on the ring
ferr.currseed = 0;

% Set the 'used' parameter to 0 to initialise. Flag used to determine if
% field errors have been calculated for that element.
for i=1:length(THERING)
    ferr.data(i).name = THERING{i}.FamName;
    ferr.data(i).used = 0;
    ferr.data(i).valA = [];
    ferr.data(i).valB = [];
end

% Calculate the random field error values. At the moment the longitudinal
% shift component, ds, will be ignored as well as thetax, and thetay for
% the girders. These take more time to compute and at the moment or writing
% is not seen as being necessary.

% Calculate the individual field errors.
for i=1:ferr.nind
    indices = ferr.ind(i).ATindex;
    % Assumes for the particular group of elements/family the number of
    % polynomials used in the simulation are of the same length.
    numPolynomA = length(THERING{indices(1)}.PolynomA);
    numPolynomB = length(THERING{indices(1)}.PolynomB);
    if
    for j=indices
        if isempty(ferr.data(j).valA)
            ferr.data(j).valA = zeros(numPolynomA,numseeds);
        end
        ferr.data(j).valA = ferr.data(j).valA + generaterandom(ferr.ind(i).sigmaA,...
            numseeds,ferr.ind(i).cutoff,disttype);
        if isempty(ferr.data(j).valB)
            ferr.data(j).valB = zeros(numPolynomB,numseeds);
        end
        ferr.data(j).valB = ferr.data(j).valB + generaterandom(ferr.ind(i).sigmaB,...
            numseeds,ferr.ind(i).cutoff,disttype);
        
        % Flaged for easier search of elements that have been misaligned
        ferr.data(j).used = 1;
    end
end

disp('Finished calculation the field errors');
setappdata(0,'FielderrData',ferr);



function randnum = generaterandom(sigma,num,cutoff,disttype)

numSigval = length(sigma);
sigmatrix = repmat(reshape(sigma,numSigval,1),1,num);

switch disttype
    case 'normal'
        % Normal distribution
        % randnum is a numSigval x num matrix
        randnum = sigmatrix.*randn(numSigval, num);
        % If cutoff == 0 then don't cut anything.
        if cutoff ~= 0
            ind = find(abs(randnum) > cutoff*sigmatrix);
            while ~isempty(ind)
                randnum(ind) = sigmatrix(ind).*randn(length(ind),1);
                ind = find(abs(randnum) > cutoff.*sigmatrix);
            end
        end
    case 'equal'
        % Equal/Flat distribution
        % Cutoff ignored completely
        randnum = sigmatrix.*(2*rand(numSigval, num) - 1);
    case 'sho'
        % Simple harmonic oscillator distribution
        randnum = sigmatrix.*sin(rand(numSigval, num)*2*pi);
    case 'abs'
        % Use the values provided. No randomness.
        randnum = sigmatrix;
    otherwise
        disp(['Unknown distribution: ' disttype]);
        randnum = [];
end